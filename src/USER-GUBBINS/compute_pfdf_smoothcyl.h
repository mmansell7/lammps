/* -*- c++ -*- ----------------------------------------------------------
   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
   http://lammps.sandia.gov, Sandia National Laboratories
   Steve Plimpton, sjplimp@sandia.gov

   Copyright (2003) Sandia Corporation.  Under the terms of Contract
   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
   certain rights in this software.  This software is distributed under
   the GNU General Public License.

   See the README file in the top-level LAMMPS directory.

   This compute based on lammps-16March18 version of compute_rdf.h. 
   Modifications written by Matt Mansell, jmmansel@ncsu.edu.
   
------------------------------------------------------------------------- */

// A LAMMPS compute to compute the distribution of forces between every
// two points in a cylindrical system with an external potential that
// is dependent only on radial position, and wherein forces are generated by
// interactions between pairwise-interacting classical particles.
// Each point in the system can be identified by rectilinear Cartesian
// coordinates (x1,y1,z1,x2,y2,z2) or by coordinates (r1,theta1,z1,r2,
// theta2,phi2), where r1,theta1,z1 are the usual coordinates in 
// cylindrical geometry, r2 is the Euclidean distance between (r1,
// theta1,z1) and the second point; and theta2 and phi2 are the polar
// and azimuthal angle, respectively, formed by the first and second
// points, where theta2 = 0 is coincident with the z-axis of the first point
// and phi2 = 0 is coincident with the unit radial vector of the first point.

#ifdef COMPUTE_CLASS

ComputeStyle(pfdf/smoothcyl,ComputePFDFSmoothcyl)

#else

#ifndef LMP_COMPUTE_PFDF_H
#define LMP_COMPUTE_PFDF_H

#include <stdio.h>
#include "compute.h"

namespace LAMMPS_NS {

class ComputePFDFSmoothcyl : public Compute {
 public:
  ComputePFDFSmoothcyl(class LAMMPS *, int, char **);
  ~ComputePFDFSmoothcyl();
  void init();
  void init_list(int, class NeighList *);
  void compute_array();

 private:
  int numr1;                 // # of pfdf bins/nodes in r1
  int numr2;                 // # of pfdf bins/nodes in r2
  int numtheta2;             // # of pfdf bins/nodes in theta2
  int numphi2;               // # of pfdf bins/nodes in phi2
  int nnodestotal;           // total # of pfdf bins/nodes
  int cnodenum;              // # of nodes to which a sample contributes
  int cutflag;               // user cutoff flag
  int npairs;                // # of pfdf pair sets
  int bin_type_flag;         // 0: histogram bins
                             // 1: tent pole functions
  int *cnodes;
  
  double cyl_radius_max;     // Maximum radial position for pfdf
  double delr1,delr1inv;     // Bin/node width in r1 and its inverse
  double delr2,delr2inv;     // Bin/node width in r2 and its inverse
  double deltheta2;          // Bin/node width in theta2
  double deltheta2inv;       //   and its inverse
  double delphi2;            // Bin/node width in phi2
  double delphi2inv;         //   and its inverse
  double *cvals;
  
  double cutoff_user;        // user-specified cutoff
  double mycutneigh;         // user-specified cutoff + neighbor skin
  int ***pfdfpair;           // for each i-j pair type, a vector listing the
                             //   pair set id numbers of the sets of which it is a member
  int **npfdfpair;           // for each i-j pair type, the number of pair
                             //   sets of which it is a member
  int *ilo,*ihi,*jlo,*jhi;   // The min and max type id's for the i and j
                             //   atoms in each pair set.
  double ***hist;            // histogram bins ([pair_set_num][bin or node][fx,fy,fz,2-particle density]
  double ***histall;         // summed histogram bins across all procs

  int *typecount;
  int *icount,*jcount;
  int *duplicates;
  
  bigint natoms_old;

  class NeighList *list;     // half neighbor list
  void init_norm();
  
  // Transform coordinates of two particles in cartesian coordinates to 
  // pair coordinate in cylindro-spherical coordinates (r1,r2,theta2,phi2)
  void transform_to_cylsph(const double xi[6],const double xj[6],double r[4]);
  
  // Distribute contribution of a pair to bins/nodes
  void distribute_to_nodes(double rij[4],int *cnodes,double *cvals);
};

}

#endif
#endif

/* ERROR/WARNING messages:

E: Illegal ... command

Self-explanatory.  Check the input script syntax and compare to the
documentation for the command.  You can use -echo screen as a
command-line option when running LAMMPS to see the offending line.

E: Compute pfdf requires a pair style be defined

Self-explanatory.

*/
